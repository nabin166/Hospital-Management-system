// <auto-generated />
using System;
using Doctormanagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Doctormanagement.Migrations
{
    [DbContext(typeof(DoctorDbcontext))]
    partial class DoctorDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Doctormanagement.Models.Appointment", b =>
                {
                    b.Property<int>("Appoint_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Appoint_Id"), 1L, 1);

                    b.Property<string>("Appointed_Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Appoint_Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctormanagement.Models.Doctor", b =>
                {
                    b.Property<int>("Doctor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("Doctor_Id");

                    b.HasIndex("userid");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Doctormanagement.Models.DoctorAppoint", b =>
                {
                    b.Property<int>("DocAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocAppId"), 1L, 1);

                    b.Property<int>("Appoint_Id")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_Id")
                        .HasColumnType("int");

                    b.HasKey("DocAppId");

                    b.HasIndex("Appoint_Id");

                    b.HasIndex("Doctor_Id");

                    b.ToTable("DoctorAppoints");
                });

            modelBuilder.Entity("Doctormanagement.Models.Patient", b =>
                {
                    b.Property<int>("Patient_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patient_Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("Patient_Id");

                    b.HasIndex("userid");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Doctormanagement.Models.PatientAppoint", b =>
                {
                    b.Property<int>("PatAppid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatAppid"), 1L, 1);

                    b.Property<int>("Appoint_Id")
                        .HasColumnType("int");

                    b.Property<int>("Patient_Id")
                        .HasColumnType("int");

                    b.HasKey("PatAppid");

                    b.HasIndex("Appoint_Id");

                    b.HasIndex("Patient_Id");

                    b.ToTable("PatientAppoints");
                });

            modelBuilder.Entity("Doctormanagement.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Roles = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Roles = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Roles = "Patient"
                        });
                });

            modelBuilder.Entity("Doctormanagement.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("User_Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Doctormanagement.Models.Doctor", b =>
                {
                    b.HasOne("Doctormanagement.Models.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doctormanagement.Models.DoctorAppoint", b =>
                {
                    b.HasOne("Doctormanagement.Models.Appointment", "Appointment")
                        .WithMany("DoctorAppoints")
                        .HasForeignKey("Appoint_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctormanagement.Models.Doctor", "Doctor")
                        .WithMany("DoctorAppoints")
                        .HasForeignKey("Doctor_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Doctormanagement.Models.Patient", b =>
                {
                    b.HasOne("Doctormanagement.Models.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doctormanagement.Models.PatientAppoint", b =>
                {
                    b.HasOne("Doctormanagement.Models.Appointment", "Appointment")
                        .WithMany("PatientAppoints")
                        .HasForeignKey("Appoint_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctormanagement.Models.Patient", "Patient")
                        .WithMany("PatientAppoints")
                        .HasForeignKey("Patient_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Doctormanagement.Models.User", b =>
                {
                    b.HasOne("Doctormanagement.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Doctormanagement.Models.Appointment", b =>
                {
                    b.Navigation("DoctorAppoints");

                    b.Navigation("PatientAppoints");
                });

            modelBuilder.Entity("Doctormanagement.Models.Doctor", b =>
                {
                    b.Navigation("DoctorAppoints");
                });

            modelBuilder.Entity("Doctormanagement.Models.Patient", b =>
                {
                    b.Navigation("PatientAppoints");
                });

            modelBuilder.Entity("Doctormanagement.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Doctormanagement.Models.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
